---
import Layout from '../../layouts/Layout.astro';
import ServiceCard from '../../components/ServiceCard.astro';
import { getCollection } from 'astro:content';

// 获取所有服务内容
const services = await getCollection('services', ({ id }) => {
  return id.startsWith('zh/');
});

// 获取所有标签分组
const allTagGroups = services.reduce((groups, service) => {
  service.data.tags.forEach(tagGroup => {
    if (!groups[tagGroup.category]) {
      groups[tagGroup.category] = new Set();
    }
    tagGroup.items.forEach(tag => {
      groups[tagGroup.category].add(tag);
    });
  });
  return groups;
}, {} as Record<string, Set<string>>);

// 获取当前选中的标签
const searchParams = new URLSearchParams(Astro.url.search);
const selectedCategory = searchParams.get('category');
const selectedTag = searchParams.get('tag');

// 调试信息
console.log('Current URL:', Astro.url.toString());
console.log('Raw search params:', Astro.url.search);
console.log('Decoded category:', selectedCategory);
console.log('Decoded tag:', selectedTag);

// 过滤服务
const filteredServices = services.filter(service => {
  if (!selectedTag && !selectedCategory) return true;
  
  const matches = service.data.tags.some(tagGroup => {
    // 如果选择了分类，检查当前服务是否属于该分类
    if (selectedCategory && tagGroup.category !== selectedCategory) {
      console.log(`Service ${service.data.title}: Category mismatch - ${tagGroup.category} !== ${selectedCategory}`);
      return false;
    }
    // 如果选择了标签，检查当前服务是否包含该标签
    if (selectedTag && !tagGroup.items.includes(selectedTag)) {
      console.log(`Service ${service.data.title}: Tag mismatch - ${tagGroup.items.join(', ')} does not include ${selectedTag}`);
      return false;
    }
    console.log(`Service ${service.data.title}: Matches filter`);
    return true;
  });

  return matches;
});

console.log('Filtered services count:', filteredServices.length);
console.log('Filtered services:', filteredServices.map(s => s.data.title));

// 生成标签链接
function getTagLink(category: string, tag?: string) {
  const params = new URLSearchParams();
  if (category) params.set('category', category);
  if (tag) params.set('tag', tag);
  return `/services?${params.toString()}`;
}
---

<Layout title="服务列表 - SelfHost Hub" description="浏览所有可自托管的服务，找到最适合你的工具。">
  <div class="space-y-8">
    <div class="text-center">
      <h1 class="text-3xl font-bold text-gray-900 mb-4">服务列表</h1>
      <p class="text-lg text-gray-600">探索各种可自托管的工具和服务</p>
    </div>

    <div class="space-y-4" id="tagFilters">
      {Object.entries(allTagGroups).map(([category, tags]) => (
        <div class="flex flex-wrap gap-2">
          <span class="text-sm font-medium text-gray-500 px-2">{category}：</span>
          <button
            data-category={category}
            class={`px-4 py-2 rounded-full text-sm font-medium ${
              selectedCategory === category && !selectedTag
                ? 'bg-blue-100 text-blue-800'
                : 'bg-gray-100 text-gray-800 hover:bg-gray-200'
            }`}
          >
            全部
          </button>
          {Array.from(tags).map((tag) => (
            <button
              data-category={category}
              data-tag={tag}
              class={`px-4 py-2 rounded-full text-sm font-medium ${
                selectedTag === tag && selectedCategory === category
                  ? 'bg-blue-100 text-blue-800'
                  : 'bg-gray-100 text-gray-800 hover:bg-gray-200'
              }`}
            >
              {tag}
            </button>
          ))}
        </div>
      ))}
    </div>

    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
      {filteredServices.map((service) => (
        <ServiceCard
          title={service.data.title}
          description={service.data.description}
          tags={service.data.tags.flatMap(group => group.items)}
          url={`/services/${service.id.replace('zh/', '').replace('.md', '')}`}
        />
      ))}
    </div>
  </div>
</Layout>

<script>
  // 获取所有标签按钮
  const tagButtons = document.querySelectorAll('#tagFilters button');
  
  // 为每个按钮添加点击事件监听器
  tagButtons.forEach(button => {
    button.addEventListener('click', () => {
      const category = button.getAttribute('data-category');
      const tag = button.getAttribute('data-tag');
      
      // 调试信息
      console.log('Button clicked:', { category, tag });
      
      // 构建新的 URL
      const params = new URLSearchParams();
      if (category) params.set('category', category);
      if (tag) params.set('tag', tag);
      
      const newUrl = `/services?${params.toString()}`;
      console.log('Navigating to:', newUrl);
      
      // 更新 URL 并刷新页面
      window.location.href = newUrl;
    });
  });

  // 页面加载时的调试信息
  console.log('Current URL:', window.location.href);
  console.log('Search params:', window.location.search);
</script> 